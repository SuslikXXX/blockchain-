const hre = require("hardhat");

async function main() {
  // –î–µ–ø–ª–æ–∏–º Token –∫–æ–Ω—Ç—Ä–∞–∫—Ç
  const Token = await hre.ethers.getContractFactory("Token");
  const token = await Token.deploy("TestToken", "TST", 1000000); // 1M tokens

  await token.waitForDeployment();

  const address = await token.getAddress();
  console.log("Token deployed to:", address);

  // –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤
  const [owner, addr1, addr2, addr3, addr4] = await hre.ethers.getSigners();
  
  console.log("\nüöÄ –í—ã–ø–æ–ª–Ω—è–µ–º —Å–µ—Ä–∏—é ERC20 —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...");
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
  const initialBalance = await token.balanceOf(owner.address);
  console.log(`üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å owner: ${hre.ethers.formatEther(initialBalance)} TST`);

  // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–µ—Ä–∏—é —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤ –æ—Ç owner –∫ —Ä–∞–∑–Ω—ã–º –∞–¥—Ä–µ—Å–∞–º
  const initialTransfers = [
    { to: addr1.address, amount: "500", name: "Addr1" },
    { to: addr2.address, amount: "750", name: "Addr2" },
    { to: addr3.address, amount: "300", name: "Addr3" },
    { to: addr4.address, amount: "200", name: "Addr4" },
  ];

  for (let i = 0; i < initialTransfers.length; i++) {
    const transfer = initialTransfers[i];
    const amount = hre.ethers.parseEther(transfer.amount);
    
    console.log(`\nüîÑ Transfer ${i + 1}: ${transfer.amount} TST -> ${transfer.name} (${transfer.to})`);
    
    const tx = await token.transfer(transfer.to, amount);
    await tx.wait();
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ! TxHash: ${tx.hash}`);
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }

  // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—ã –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  console.log("\nüîÑ –¢—Ä–∞–Ω—Å—Ñ–µ—Ä—ã –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:");
  
  const userTransfers = [
    { from: addr1, to: addr2.address, amount: "100", fromName: "Addr1", toName: "Addr2" },
    { from: addr2, to: addr3.address, amount: "200", fromName: "Addr2", toName: "Addr3" },
    { from: addr3, to: addr4.address, amount: "50", fromName: "Addr3", toName: "Addr4" },
    { from: addr4, to: addr1.address, amount: "75", fromName: "Addr4", toName: "Addr1" },
  ];

  for (let i = 0; i < userTransfers.length; i++) {
    const transfer = userTransfers[i];
    const amount = hre.ethers.parseEther(transfer.amount);
    
    console.log(`\nüîÑ User Transfer ${i + 1}: ${transfer.amount} TST -> ${transfer.fromName} ‚Üí ${transfer.toName}`);
    
    const tx = await token.connect(transfer.from).transfer(transfer.to, amount);
    await tx.wait();
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ! TxHash: ${tx.hash}`);
    
    await new Promise(resolve => setTimeout(resolve, 1000));
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã
  console.log("\nüìä –ò—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã:");
  const accounts = [
    { name: "Owner", addr: owner.address },
    { name: "Addr1", addr: addr1.address },
    { name: "Addr2", addr: addr2.address },
    { name: "Addr3", addr: addr3.address },
    { name: "Addr4", addr: addr4.address },
  ];

  for (const account of accounts) {
    const balance = await token.balanceOf(account.addr);
    console.log(`${account.name}: ${hre.ethers.formatEther(balance)} TST`);
  }

  console.log("\nüéâ –í—Å–µ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!");
  console.log("üìã –ö–æ–Ω—Ç—Ä–∞–∫—Ç:", address);
  console.log("üîç –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ ERC20 —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤.");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  }); 