package main

import (
	"context"
	"io"
	"log"
	"os"
	"os/signal"
	"path/filepath"
	"syscall"

	"backend/configs"
	"backend/internal/repositories"
	"backend/internal/services"

	"github.com/ethereum/go-ethereum/common"
	"github.com/sirupsen/logrus"
)

func init() {
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	logrus.SetFormatter(&logrus.TextFormatter{
		FullTimestamp: true,
		ForceColors:   true,
		PadLevelText:  true,
	})
	logrus.SetOutput(os.Stdout)

	home, err := os.UserHomeDir()
	if err != nil {
		log.Fatal(err)
	}

	logDir := filepath.Join(home, "Desktop", "blockchain_analyzer", "backend", "logs")
	logName := filepath.Join(logDir, "app.log")
	logFile, err := os.OpenFile(logName, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0644)

	if err != nil {
		logrus.Fatalf("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: %v", err)
	}
	multiWriter := io.MultiWriter(os.Stdout, logFile)
	logrus.SetOutput(multiWriter)

	logrus.SetLevel(logrus.InfoLevel)
}

func main() {
	logrus.Info("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–ª–æ–∫—á–µ–π–Ω–∞")

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg := configs.Load()

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	if err := repositories.Connect(ctx, cfg); err != nil {
		logrus.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: %v", err)
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
	if err := repositories.Migrate(); err != nil {
		logrus.Fatalf("–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
	contractAddr := common.HexToAddress(cfg.Ethereum.ContractAddress)
	if contractAddr == (common.Address{}) {
		logrus.Fatalf("–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: %s", cfg.Ethereum.ContractAddress)
	}

	logrus.Infof("üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º ERC20 –∫–æ–Ω—Ç—Ä–∞–∫—Ç: %s", contractAddr.Hex())

	// –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
	analyzer, err := services.NewAnalyzer(cfg)
	if err != nil {
		logrus.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: %v", err)
	}

	if err := analyzer.Start(ctx); err != nil {
		logrus.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: %v", err)
	}

	// –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
	waitForShutdown(cancel, analyzer)
}

func waitForShutdown(cancel context.CancelFunc, analyzer *services.Analyzer) {
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	logrus.Info("üì° –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")

	<-sigChan
	logrus.Info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")

	cancel()
	analyzer.Stop()

	if err := repositories.Close(); err != nil {
		logrus.Errorf("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: %v", err)
	}

	logrus.Info("üëã –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}
