package services

import (
	"backend/internal/models"
	"backend/internal/repositories"
	"context"
	"fmt"
	"os"
	"path/filepath"
	"strconv"
	"sync"
	"time"

	"github.com/sirupsen/logrus"
	"gorm.io/gorm"

	"backend/configs"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type CustomFormatter struct {
	logrus.TextFormatter
}

func (f *CustomFormatter) Format(entry *logrus.Entry) ([]byte, error) {
	return []byte(fmt.Sprintf("%s %s\n", entry.Time.Format(time.RFC3339), entry.Message)), nil
}

const (
	notificationInterval = 20 * time.Second
	batchSize            = 100
)

type Notifier struct {
	db       *gorm.DB
	notifLog *logrus.Logger
	bot      *tgbotapi.BotAPI
	chatID   string
	cancel   context.CancelFunc
	wg       sync.WaitGroup
}

func NewNotifier(cfg *configs.Config) (*Notifier, error) {
	// –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π
	notifLog := logrus.New()
	notifLog.SetFormatter(&CustomFormatter{})

	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
	logDir := filepath.Join("logs", "notifications")
	if err := os.MkdirAll(logDir, 0755); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤: %v", err)
	}

	// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π
	logFile, err := os.OpenFile(
		filepath.Join(logDir, "notifications.log"),
		os.O_CREATE|os.O_WRONLY|os.O_APPEND,
		0644,
	)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: %v", err)
	}

	notifLog.SetOutput(logFile)

	// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
	var bot *tgbotapi.BotAPI
	if cfg.TelegramBot.BotToken != "" {
		bot, err = tgbotapi.NewBotAPI(cfg.TelegramBot.BotToken)
		if err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telegram –±–æ—Ç–∞: %v", err)
		}
	}

	return &Notifier{
		db:       repositories.DB,
		notifLog: notifLog,
		bot:      bot,
		chatID:   cfg.TelegramBot.ChatID,
	}, nil
}

func (n *Notifier) Start(ctx context.Context) error {
	ctx, cancel := context.WithCancel(ctx)
	n.cancel = cancel

	n.wg.Add(1)
	go func() {
		defer n.wg.Done()

		// –ñ–¥–µ–º –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ 15-—Å–µ–∫—É–Ω–¥–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
		now := time.Now()
		nextPeriod := now.Truncate(15 * time.Second).Add(15 * time.Second)
		time.Sleep(time.Until(nextPeriod))

		// –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ—á–Ω–æ –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
		ticker := time.NewTicker(15 * time.Second)
		defer ticker.Stop()

		// –°—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
		if err := n.processNewActivities(); err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: %v", err)
		}

		for {
			select {
			case <-ctx.Done():
				return
			case <-ticker.C:
				start := time.Now()
				if err := n.processNewActivities(); err != nil {
					logrus.Errorf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: %v", err)
				}
				// –õ–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
				if elapsed := time.Since(start); elapsed > 5*time.Second {
					logrus.Warnf("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–Ω—è–ª–∞ %v", elapsed)
				}
			}
		}
	}()

	return nil
}

func (n *Notifier) Stop() {
	if n.cancel != nil {
		n.cancel()
		n.wg.Wait()
	}
}

func (n *Notifier) processNewActivities() error {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
	currentPeriod := time.Now().Truncate(15 * time.Second)

	// –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ –ø–µ—Ä–∏–æ–¥–∞
	var activities []models.AccountActivity
	if err := n.db.Where("period >= ? AND period < ?",
		currentPeriod.Add(-15*time.Second), // –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥
		currentPeriod.Add(15*time.Second),  // —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥
	).Order("id ASC").Find(&activities).Error; err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: %v", err)
	}

	for _, activity := range activities {
		if err := n.analyzeActivity(&activity); err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ %d: %v", activity.ID, err)
			continue
		}
	}

	return nil
}

func (n *Notifier) analyzeActivity(activity *models.AccountActivity) error {

	if (activity.TransactionCount + activity.TokenTransfers) > 3 {

		err := n.SendMessageTelegram(activity)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: %v", err)
		}

		err = n.MakeNotificationLog(activity)
		if err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–∞: %v", err)
		}
	}
	return nil
}

func (n *Notifier) SendMessageTelegram(activity *models.AccountActivity) error {
	message := fmt.Sprintf(
		"üîç <b>–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n"+
			"üìç –ê–¥—Ä–µ—Å: <code>%s</code>\n"+
			"‚è∞ –ü–µ—Ä–∏–æ–¥: %v\n"+
			"üîÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %d\n"+
			"üîÅ –¢–æ–∫–µ–Ω-—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—ã: %d\n"+
			"üí∞ –û–±—ä–µ–º (ETH): %s",
		activity.Address,
		activity.Period.Format("2006-01-02 15:04:05"),
		activity.TransactionCount,
		activity.TokenTransfers,
		activity.GetVolumeETH().String(),
	)

	if n.bot != nil && n.chatID != "" {
		chatID, err := strconv.ParseInt(n.chatID, 10, 64)
		if err != nil {
			logrus.Errorf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id: %v", err)
			return nil
		}

		msg := tgbotapi.NewMessage(chatID, message)
		msg.ParseMode = tgbotapi.ModeHTML

		if _, err := n.bot.Send(msg); err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: %v", err)
		}
	}

	return nil
}

func (n *Notifier) MakeNotificationLog(activity *models.AccountActivity) error {
	n.notifLog.Printf("Address: %s, Period: %v, TransactionCount: %d, TokenTransfers: %d",
		activity.Address,
		activity.Period,
		activity.TransactionCount,
		activity.TokenTransfers)

	return nil
}
